@page "/ViewTodos"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using UIComponents
@using Domain.DTOs
@inject ITodoService todoService
@inject NavigationManager navMgr;

<h3>ViewTodos</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(showFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => showFilters = !showFilters)" alt="Funnel"/>
        @if (showFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="userNameFilter"/>
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Is completed?</label>
                <select @bind="completedStatusFilter">
                    <option value="all">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
        }
    </div>
</div>
<div>
    <button @onclick="LoadTodos">Load</button>
</div>

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@if (todos == null)
{
    //Not loaded yet
}
else if (!todos.Any())
{
    <p>No todos to display</p>
}
else
{
    <table>
        <tr>
            <th>Todo ID</th>
            <th>Owner</th>
            <th>Title</th>
            <th>Completed</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
        <tbody>
        @foreach (Todo todo in todos)
        {
            <tr>
                <td>@todo.Id</td>
                <td>@todo.Owner.UserName</td>
                <td>@todo.Title</td>
                <td>
                    <FancyCheckBox Completed="@todo.IsCompleted" OnChange="@((status) => CompleteTodo(todo, status))"/>
                </td>
                <td>
                    <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditTodo/{todo.Id}"))">
                </td>
                <td>
                    <label @onclick="@(() => DeleteTodo(todo.Id))" style="cursor:pointer; color: red; font-weight: bold">&#x2716;</label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Todo>? todos;
    private string msg = "";
    private bool showFilters = false;

    private string? userNameFilter;
    private int? userIdFilter;
    private string? completedStatusFilter;
    private string? titleContainsFilter;

    private async Task LoadTodos()
    {
        msg = "";
        try
        {
            bool? completedFilterValue = null;
            if (!string.IsNullOrEmpty(completedStatusFilter) && !completedStatusFilter.Equals("All"))
                completedFilterValue = bool.Parse(completedStatusFilter);
            todos = await todoService.GetAsync(userNameFilter, userIdFilter, completedFilterValue, titleContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async void CompleteTodo(Todo todo, bool status)
    {
        if (todo.IsCompleted && !status)
        {
            //TODO change the FancyCheckbox back to empty here
            return;
        }
        TodoUpdateDto dto = new(todo.Id)
        {
            IsCompleted = status
        };

        try
        {
            await todoService.UpdateAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task DeleteTodo(int id)
    {
        msg = "";
        try
        {
            await todoService.DeleteAsync(id);
            List<Todo> list = new (todos);
            list.RemoveAll(todo => todo.Id == id);
            todos = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}